# -*- coding: utf-8 -*-
"""GRE_Admission_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i0s78vMceotBIiAh8ASdq68W0Z8jelxM

###This is a Regression problem where we try to predict is admission of student is possible based on different parameters. Our output a probability
"""

# Importing all necessary dependencies
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow	import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras import layers
from tensorflow.keras.layers import Dense,Input
from sklearn.compose import ColumnTransformer
from sklearn.metrics import r2_score

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('/content/drive/MyDrive/ML/Admission_Predict.csv')

df.head()

df.info()

"""Checking Duplicated Values"""

df.duplicated().sum()

"""Dividing Dataset into Labels and Features while removing unecesaary columnns"""

labels = df.iloc[:, -1]
features = df.iloc[:,1:-1]
print(labels.head())
print()
print(features.head())

"""Splitting Dataset into Train and Test"""

features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.25, random_state = 42)

"""Scaling Dataset"""

scaler = StandardScaler()

features_train_scaled = scaler.fit_transform(features_train)
features_test_scaled = scaler.transform(features_test)

"""### Creating a ANN model"""

model = Sequential()
model.add(Input(shape=(7,)))
model.add(Dense(16, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='linear'))
model.compile(optimizer='adam', loss='mse', metrics=['accuracy','mae'])
model.summary()

es = EarlyStopping(
                    patience=10,
                    min_delta=0.0001,
                    monitor="val_loss",
                    restore_best_weights=True
                    )

history = model.fit(features_train_scaled, labels_train, epochs=100, verbose=1, batch_size=4, validation_split=0.25, callbacks=[es])

accuracy, mse, mae = model.evaluate(features_test_scaled, labels_test)
print(f"Test Loss: {mse}")
print(f"Test MAE: {mae}")
print(f"Test accuracy: {accuracy}")

predictions = model.predict(features_test_scaled)
r2 = r2_score(labels_test, predictions)
print(f"Test RÂ² Score: {r2}")

fig = plt.figure()
plt1 = fig.add_subplot(2, 1, 1)
plt1.plot(history.history['mae'])
plt1.plot(history.history['val_mae'])
plt1.set_title('model mae')
plt1.set_ylabel('MAE')
plt1.set_xlabel('epoch')
plt1.legend(['train', 'validation'], loc='upper left')
plt.subplots_adjust(hspace=0.5)

plt2 = fig.add_subplot(2, 1, 2)
plt2.plot(history.history['loss'])
plt2.plot(history.history['val_loss'])
plt2.set_title('model loss')
plt2.set_ylabel('loss')
plt2.set_xlabel('epoch')
plt2.legend(['train', 'validation'], loc='upper left')

# Compare the first 10 predicted values with the actual values
for i in range(10):
  print("Predicted admission probability:", predictions[i][0])
  print("Actual admission:", labels_test.iloc[i])
  print()