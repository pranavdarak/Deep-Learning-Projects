# -*- coding: utf-8 -*-
"""Handwritten_digit_recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14U5p9-qCvfDMEYtdRLvT_oOTYnLWnyrx

###Writing a code for Recognising Handwritten digit using a simple ANN
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense,Flatten

"""Loading the Dataset from Keras Library"""

# Load the MNIST dataset
mnist = tf.keras.datasets.mnist

# Load the dataset into training and testing sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train.shape

x_train

import matplotlib.pyplot as plt
plt.imshow(x_train[5])

"""Creating an ANN model"""

model = Sequential()

model.add(Flatten(input_shape=(28,28))) #Flattenin the 2-D array to make sure reduce dimension to 1-D array
model.add(Dense(128,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.summary()

model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

history = model.fit(x_train,y_train,epochs=15,validation_split=0.2)

y_prob = model.predict(x_test)

y_pred = y_prob.argmax(axis=1)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,y_pred)
acc_percentage = accuracy * 100
print(f'Accuracy: {acc_percentage:.2f}%')

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.subplot(2, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

plt.imshow(x_test[4])

model.predict(x_test[4].reshape(1,28,28)).argmax(axis=1)

